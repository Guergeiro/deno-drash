{
  "into": {
    "DocBlocksToJson": {
      "fully_qualified_name": "into.DocBlocksToJson",
      "name": "DocBlocksToJson",
      "annotation": "@class DocBlocksToJson",
      "description": [
        "This compiler reads doc blocks and converts them to parsable JSON."
      ],
      "properties": [
        {
          "access_modifier": "protected",
          "description": [
            "A property to hold the final result of the compilation."
          ],
          "signature": "protected parsed: any = {}",
          "annotation": "@property any parsed",
          "data_type": "any",
          "name": "parsed"
        },
        {
          "access_modifier": "protected",
          "description": [
            "A property to hold the name of the current file being parsed. This property\nonly exists for debugging purposes. This class has logging to make it\neasier for Drash developers and users to find errors during compilation."
          ],
          "signature": "protected current_file: string = \"\"",
          "annotation": "@property string current_file",
          "data_type": "string",
          "name": "current_file"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Compile a JSON array containing classes, properties, and methods from the\nspecified files by parsing the doc blocks of each file."
          ],
          "signature": "public compile(files: string[]): any",
          "name": "compile",
          "params": [
            {
              "annotation": "@param string[] files",
              "data_type": "string[]",
              "description": [
                "The array of files containing doc blocks to parse."
              ],
              "name": "files"
            }
          ],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns the JSON array."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the specified `@annotationname` definitions from the specified doc\nblock."
          ],
          "signature": "public getDocBlockAnnotationBlocks(annotation: string, docBlock: string): any[]",
          "name": "getDocBlockAnnotationBlocks",
          "params": [
            {
              "annotation": "@param string annotation",
              "data_type": "string",
              "description": [
                "The annotation to get in the following format: `@annotationname`."
              ],
              "name": "annotation"
            },
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The docBlock to get the `@annotationname` definitions from."
              ],
              "name": "docBlock"
            }
          ],
          "returns": [
            {
              "annotation": "@return any[]",
              "data_type": "any[]",
              "description": [
                "Returns an array of data related to the specified annotation."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Parse the specified array of method doc blocks and return an array of\nmethod-related data."
          ],
          "signature": "protected getClassMethods(docBlocks: string[]): any[]",
          "name": "getClassMethods",
          "params": [
            {
              "annotation": "@param string[] docBlocks",
              "data_type": "string[]",
              "description": [
                "The array of doc blocks to parse."
              ],
              "name": "docBlocks"
            }
          ],
          "returns": [
            {
              "annotation": "@return any[]",
              "data_type": "any[]",
              "description": [
                "Returns an array of method-related data."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Parse the specified class doc block."
          ],
          "signature": "protected getClassDocBlock(docBlock: string): any",
          "name": "getClassDocBlock",
          "params": [
            {
              "annotation": "@param string[] docBlocks",
              "data_type": "string[]",
              "description": [
                "The array of doc blocks to parse."
              ],
              "name": "docBlocks"
            }
          ],
          "returns": [
            {
              "annotation": "@return any[]",
              "data_type": "any[]",
              "description": [
                "Returns an array of property-related data."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Parse the specified array of property doc blocks and return an array of\nproperty-related data."
          ],
          "signature": "protected getClassProperties(docBlocks: string[]): any[]",
          "name": "getClassProperties",
          "params": [
            {
              "annotation": "@param string[] docBlocks",
              "data_type": "string[]",
              "description": [
                "The array of doc blocks to parse."
              ],
              "name": "docBlocks"
            }
          ],
          "returns": [
            {
              "annotation": "@return any[]",
              "data_type": "any[]",
              "description": [
                "Returns an array of property-related data."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the common doc block data between a class' property doc blocks and\nmethod doc blocks."
          ],
          "signature": "protected getClassCommonData(docBlock: string): any",
          "name": "getClassCommonData",
          "params": [
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The doc block in question."
              ],
              "name": "docBlock"
            }
          ],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns an access modifier, description, and signature."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the `@annotationname` line."
          ],
          "signature": "protected getDocBlockAnnotationLine(annotation: string, docBlock: string): any",
          "name": "getDocBlockAnnotationLine",
          "params": [
            {
              "annotation": "@param string annotation",
              "data_type": "string",
              "description": [
                "The annotation to get from the doc block."
              ],
              "name": "annotation"
            },
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The doc block to get the `@annotationname` definitions from."
              ],
              "name": "docBlock"
            }
          ],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns an object containing the annotation lines data."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the description of the specified doc block."
          ],
          "signature": "protected getDocBlockDescription(docBlock: string): string[]",
          "name": "getDocBlockDescription",
          "params": [
            {
              "annotation": "@param string docblock",
              "data_type": "string",
              "description": [
                "The doc block in question."
              ],
              "name": "docblock"
            }
          ],
          "returns": [
            {
              "annotation": "@return string[]",
              "data_type": "string[]",
              "description": [
                "Returns an array of descriptions."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get paragraphs from a text block."
          ],
          "signature": "protected getParagraphs(textBlock: string): string[]",
          "name": "getParagraphs",
          "params": [
            {
              "annotation": "@param string textBlock",
              "data_type": "string",
              "description": [
                "The text block containing the paragraph(s)."
              ],
              "name": "textBlock"
            }
          ],
          "returns": [
            {
              "annotation": "@return string[]",
              "data_type": "string[]",
              "description": [
                "Returns an array of strings. Each element in the array is a separate\nparagraph."
              ],
              "name": null
            }
          ],
          "throws": []
        }
      ]
    }
  },
  "Drash.Exceptions": {
    "HttpException": {
      "fully_qualified_name": "Drash.Exceptions.HttpException",
      "name": "HttpException",
      "annotation": "@class HttpException",
      "description": [
        "This class helps you throw HTTP errors in a semantic way."
      ],
      "properties": [],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(code: number, message?: string)",
          "name": "number,",
          "params": [
            {
              "annotation": "@param number code",
              "data_type": "number",
              "description": [
                "The code to associate this error with. This should be a valid HTTP\nstatus code."
              ],
              "name": "code"
            },
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The error message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        }
      ]
    }
  },
  "Drash.Http": {
    "Request": {
      "fully_qualified_name": "Drash.Http.Request",
      "name": "Request",
      "annotation": "@class Request",
      "description": [
        "This is a wrapper class for `ServerRequest` (from\nhttps://deno.land/x/http/server.ts). It just adds more properties to the\nrequest object--allowing Drash to work with a more flexible request object."
      ],
      "properties": [
        {
          "access_modifier": "public",
          "description": [
            "A property to access the original `ServerRequest` object."
          ],
          "signature": "public original_request_object: ServerRequest",
          "annotation": "@property ServerRequest original_request_object",
          "data_type": "ServerRequest",
          "name": "original_request_object"
        },
        {
          "access_modifier": "public",
          "description": [
            "A property to hold the path params of the request. For example, if a\nrequest with the URI `/users/1234` is sent by a client and the request is\nmatched to a resource class with a path of `/users/:id`, then\n`this.path_params.id == 1234`."
          ],
          "signature": "public path_params: any = {}",
          "annotation": "@property any path_params",
          "data_type": "any",
          "name": "path_params"
        },
        {
          "access_modifier": "public",
          "description": [
            "A property to hold the path of the request's URL. For example, if a request\nwith the URL `localhost:8000/users/1234` is sent by a client, then the path\nto this request is `/users/1234`."
          ],
          "signature": "public url_path: string",
          "annotation": "@property string url_path",
          "data_type": "string",
          "name": "url_path"
        },
        {
          "access_modifier": "public",
          "description": [
            "A property to hold the query params of the request's URL in key-value pair\nformat. For example, if a request with the URL\n`localhost:8000?response_content_type=text/html` is sent by a client, then\n`this.url_query_params == {response_content_type: \"text/html\"}`."
          ],
          "signature": "public url_query_params: any = {}",
          "annotation": "@property any url_query_params",
          "data_type": "any",
          "name": "url_query_params"
        },
        {
          "access_modifier": "public",
          "description": [
            "A property to hold the query string of the request's URL. For example, if a\nrequest with the URL `localhost:8000?response_content_type=text/html` is\nsent by a client, then `this.url_query_string ==\n\"response_content_type=text/html\"`. Note that the leading\n`?` is removed."
          ],
          "signature": "public url_query_string: string = null",
          "annotation": "@property string url_query_string",
          "data_type": "string",
          "name": "url_query_string"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(request: ServerRequest)",
          "name": "ServerRequest)",
          "params": [
            {
              "annotation": "@param ServerRequest request",
              "data_type": "ServerRequest",
              "description": [],
              "name": "request"
            }
          ],
          "returns": [],
          "throws": []
        }
      ]
    },
    "Resource": {
      "fully_qualified_name": "Drash.Http.Resource",
      "name": "Resource",
      "annotation": "@class Resource",
      "description": [
        "This is the base resource class for all resources. All resource classes must\nbe derived from this class."
      ],
      "properties": [
        {
          "access_modifier": "protected",
          "description": [
            "The request object."
          ],
          "signature": "protected request: Drash.Http.Request",
          "annotation": "@property Drash.Http.Request request",
          "data_type": "Drash.Http.Request",
          "name": "request"
        },
        {
          "access_modifier": "protected",
          "description": [
            "The response object."
          ],
          "signature": "protected response: Drash.Http.Response",
          "annotation": "@property Drash.Http.Response response",
          "data_type": "Drash.Http.Response",
          "name": "response"
        },
        {
          "access_modifier": "protected",
          "description": [
            "The server object."
          ],
          "signature": "protected server: Drash.Http.Server",
          "annotation": "@property Drash.Http.Server server",
          "data_type": "Drash.Http.Server",
          "name": "server"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(request: Drash.Http.Request, response: Drash.Http.Response, server: Drash.Http.Server)",
          "name": "Drash.Http.Request,",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            },
            {
              "annotation": "@param Drash.Http.Response response",
              "data_type": "Drash.Http.Response",
              "description": [
                "The response object."
              ],
              "name": "response"
            },
            {
              "annotation": "@param Drash.Http.Server server",
              "data_type": "Drash.Http.Server",
              "description": [
                "The server object."
              ],
              "name": "server"
            }
          ],
          "returns": [],
          "throws": []
        }
      ]
    },
    "Response": {
      "fully_qualified_name": "Drash.Http.Response",
      "name": "Response",
      "annotation": "@class Response",
      "description": [
        "Response handles sending a response to the client making the request."
      ],
      "properties": [
        {
          "access_modifier": "public",
          "description": [
            "The body of this response."
          ],
          "signature": "public body: any = {}",
          "annotation": "@property any body",
          "data_type": "any",
          "name": "body"
        },
        {
          "access_modifier": "public",
          "description": [
            "The body of this response as a string."
          ],
          "signature": "public body_generated: string = \"\"",
          "annotation": "@property string body_generated",
          "data_type": "string",
          "name": "body_generated"
        },
        {
          "access_modifier": "public",
          "description": [
            "This response's headers."
          ],
          "signature": "public headers: Headers",
          "annotation": "@property Headers headers",
          "data_type": "Headers",
          "name": "headers"
        },
        {
          "access_modifier": "public",
          "description": [
            "The request object."
          ],
          "signature": "public request: Drash.Http.Request",
          "annotation": "@property Drash.Http.Request request",
          "data_type": "Drash.Http.Request",
          "name": "request"
        },
        {
          "access_modifier": "public",
          "description": [
            "This response's status code (e.g., 200 for OK). _Drash.Http.Response_\nobjects use _Status_ and _STATUS_TEXT_ from [https://deno.land/x/http/http_status.ts](https://deno.land/x/http/http_status.ts)."
          ],
          "signature": "public status_code: number = Status.OK",
          "annotation": "@property number status_code",
          "data_type": "number",
          "name": "status_code"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(request: Drash.Http.Request)",
          "name": "Drash.Http.Request)",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Generate a response."
          ],
          "signature": "public generateResponse(): string",
          "name": "generateResponse",
          "params": [],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the status message based on the status code."
          ],
          "signature": "public getStatusMessage(): string",
          "name": "getStatusMessage",
          "params": [],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [
                "Returns the status message associated with `this.status_code`. For\nexample, if the response's `status_code` is `200`, then this method\nwill return \"OK\" as the status message."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the full status message based on the status code. This is just the\nstatus code and the status message together (e.g., `200 (OK)`, `401\n(Unauthorized)`, etc.)."
          ],
          "signature": "public getStatusMessageFull(): string",
          "name": "getStatusMessageFull",
          "params": [],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Send the response to the client making the request."
          ],
          "signature": "public send(): any",
          "name": "send",
          "params": [],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns the output which is passed to `Drash.Http.Request.respond()`.\nThe output is only returned for unit testing purposes. It is not\nintended to be used elsewhere as this call is the last call in the\nrequest-resource-response lifecycle."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Send the response of a \"static asset\" to the client making the request."
          ],
          "signature": "public sendStatic(): any",
          "name": "sendStatic",
          "params": [],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Generate an HTML response. The `this.body` property should be the entire\nHTML document."
          ],
          "signature": "protected generateHtmlResponse(): string",
          "name": "generateHtmlResponse",
          "params": [],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [],
              "name": null
            }
          ],
          "throws": []
        }
      ]
    },
    "Server": {
      "fully_qualified_name": "Drash.Http.Server",
      "name": "Server",
      "annotation": "@class Server",
      "description": [
        "Server handles the entire request-resource-response lifecycle. It is in\ncharge of handling HTTP requests to resources, static paths, sending\nappropriate responses, and handling any errors that bubble up within the\nrequest-resource-response lifecycle."
      ],
      "properties": [
        {
          "access_modifier": "protected",
          "description": [
            "This server's list of static paths. HTTP requests to a static path are\nusually intended to retrieve some type of concrete resource (e.g., a CSS\nfile or a JS file). If an HTTP request is matched to a static path and the\nresource the HTTP request is trying to get is found, then\n`Drash.Http.Response` will use its `sendStatic()` method to send the static\nasset back to the client."
          ],
          "signature": "protected static_paths: string[] = []",
          "annotation": "@property string[] static_paths",
          "data_type": "string[]",
          "name": "static_paths"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(configs: any)",
          "name": "any)",
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "address: string",
                "logger: Drash.Http.ConsoleLogger|Drash.Http.FileLogger",
                "response_output: string (a proper MIME type)",
                "resources: Drash.Http.Resource[]",
                "static_paths: string[]"
              ],
              "name": "configs"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle an HTTP request from the Deno server."
          ],
          "signature": "public handleHttpRequest(request: Drash.Http.Request): any",
          "name": "handleHttpRequest",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "See _Drash.Http.Response.send()_."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle cases when an error is thrown when handling an HTTP request."
          ],
          "signature": "public handleHttpRequestError(request: Drash.Http.Request, error: any): any",
          "name": "handleHttpRequestError",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            },
            {
              "annotation": "@param any error",
              "data_type": "any",
              "description": [
                "The error object."
              ],
              "name": "error"
            }
          ],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "See _Drash.Http.Response.send()_."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle HTTP requests for the favicon. This method only exists to\nshort-circuit favicon requests--preventing the requests from clogging the\nlogs."
          ],
          "signature": "public handleHttpRequestForFavicon(request: Drash.Http.Request): any",
          "name": "handleHttpRequestForFavicon",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Run the Deno server at the address specified in the configs. This method\ntakes each HTTP request and creates a new and more workable request object\nand passes it to _Drash.Http.Server.handleHttpRequest()_."
          ],
          "signature": "public async run(): Promise<void>",
          "name": "async",
          "params": [],
          "returns": [
            {
              "annotation": "@return Promise<void>",
              "data_type": "Promise<void>",
              "description": [
                "This method just listens for requests at the address you provide in the\nconfigs."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Add an HTTP resource to the server which can be retrieved at specific URIs.",
            "Drash defines an HTTP resource according to the [MDN web\ndocs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web)."
          ],
          "signature": "protected addHttpResource(resourceClass: Drash.Http.Resource): void",
          "name": "addHttpResource",
          "params": [
            {
              "annotation": "@param Drash.Http.Resource resourceClass",
              "data_type": "Drash.Http.Resource",
              "description": [
                "A child object of the `Drash.Http.Resource` class."
              ],
              "name": "resourceClass"
            }
          ],
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [
                "This method just adds `resourceClass` to `this.resources` so it can be\nused (if matched) during an HTTP request."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Add a static path for serving static assets like CSS files, JS files, PDF\nfiles, etc."
          ],
          "signature": "protected addStaticPath(path: string): void",
          "name": "addStaticPath",
          "params": [
            {
              "annotation": "@param string path",
              "data_type": "string",
              "description": [],
              "name": "path"
            }
          ],
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [
                "This method just adds `path` to `this.static_paths` so it can be used (if\nmatched) during an HTTP request."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the resource class."
          ],
          "signature": "protected getResourceClass(request: Drash.Http.Request): Drash.Http.Resource|undefined",
          "name": "getResourceClass",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "returns": [
            {
              "annotation": "@return Drash.Http.Resource|undefined",
              "data_type": "Drash.Http.Resource|undefined",
              "description": [
                "Returns a `Drash.Http.Resource` object if the URL path of the request\ncan be matched to a `Drash.Http.Resource` object's paths.",
                "Returns `undefined` if a `Drash.Http.Resource` object can't be matched."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Is the request for a static path asset?"
          ],
          "signature": "protected requestIsForStaticPathAsset(request: Drash.Http.Request): boolean",
          "name": "requestIsForStaticPathAsset",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "returns": [
            {
              "annotation": "@return boolean",
              "data_type": "boolean",
              "description": [
                "Returns true if the request is for an asset in a static path."
              ],
              "name": null
            }
          ],
          "throws": []
        }
      ]
    }
  },
  "Drash.Loggers": {
    "Logger": {
      "fully_qualified_name": "Drash.Loggers.Logger",
      "name": "Logger",
      "annotation": "@class Logger",
      "description": [
        "This logger is the base logger class for all logger classes."
      ],
      "properties": [
        {
          "access_modifier": "protected",
          "description": [
            "This logger's configs."
          ],
          "signature": "protected configs: any",
          "annotation": "@property any configs",
          "data_type": "any",
          "name": "configs"
        },
        {
          "access_modifier": "protected",
          "description": [
            "The level of the log message currently being written."
          ],
          "signature": "protected current_log_message_level_name: string",
          "annotation": "@property string current_log_message_level_name",
          "data_type": "string",
          "name": "current_log_message_level_name"
        },
        {
          "access_modifier": "protected",
          "description": [
            "See `Drash.Dictionaries.LogLevels`."
          ],
          "signature": "protected log_levels: any = LogLevels",
          "annotation": "@property any current_log_message_level_name",
          "data_type": "any",
          "name": "current_log_message_level_name"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(configs: any)",
          "name": "any)",
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "See [Drash.Loggers.Logger.configs](/#/api-reference/loggers/logger#configs)."
              ],
              "name": "configs"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a DEBUG level log message."
          ],
          "signature": "public debug(message)",
          "name": "debug",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output an ERROR level log message."
          ],
          "signature": "public error(message)",
          "name": "error",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a FATAL level log message."
          ],
          "signature": "public fatal(message)",
          "name": "fatal",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output an INFO level log message."
          ],
          "signature": "public info(message)",
          "name": "info",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a TRACE level log message."
          ],
          "signature": "public trace(message)",
          "name": "trace",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a WARN level log message."
          ],
          "signature": "public warn(message)",
          "name": "warn",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the parsed version of the raw tag string."
          ],
          "signature": "protected getTagStringParsed(): string",
          "name": "getTagStringParsed",
          "params": [],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Send the message to the write method (which should be in the child class).\nAlso, do some prechecks before sending to see if the log message should be\nwritten."
          ],
          "signature": "protected sendToWriteMethod(logMethodLevelDefinition, message)",
          "name": "sendToWriteMethod",
          "params": [
            {
              "annotation": "@param any logMethodLevelDefinition",
              "data_type": "any",
              "description": [
                "The dictionary definition of the log message's level."
              ],
              "name": "logMethodLevelDefinition"
            },
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [],
              "name": null
            }
          ],
          "throws": []
        }
      ]
    },
    "ConsoleLogger": {
      "fully_qualified_name": "Drash.Loggers.ConsoleLogger",
      "name": "ConsoleLogger",
      "annotation": "@class ConsoleLogger",
      "description": [
        "This logger allows you to log messages to the console."
      ],
      "properties": [],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(configs)",
          "name": null,
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "See Drash.Loggers.Logger.configs"
              ],
              "name": "configs"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Write a log message to the console."
          ],
          "signature": "public write(logMethodLevelDefinition, message): string",
          "name": "write",
          "params": [],
          "returns": [],
          "throws": []
        }
      ]
    },
    "FileLogger": {
      "fully_qualified_name": "Drash.Loggers.FileLogger",
      "name": "FileLogger",
      "annotation": "@class FileLogger",
      "description": [
        "This logger allows you to log messages to a file."
      ],
      "properties": [
        {
          "access_modifier": "protected",
          "description": [
            "The file this logger will write log messages to."
          ],
          "signature": "protected file: string",
          "annotation": "@property string file",
          "data_type": "string",
          "name": "file"
        }
      ],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Construct an object of this class."
          ],
          "signature": "constructor(configs)",
          "name": null,
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "See Drash.Loggers.Logger.configs"
              ],
              "name": "configs"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Write a log message to `this.file`."
          ],
          "signature": "public write(logMethodLevelDefinition, message): string",
          "name": "write",
          "params": [],
          "returns": [],
          "throws": []
        }
      ]
    }
  },
  "Drash.Services": {
    "HttpService": {
      "fully_qualified_name": "Drash.Services.HttpService",
      "name": "HttpService",
      "annotation": "@class HttpService",
      "description": [
        "This class helps perform HTTP-related processes."
      ],
      "properties": [],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Hydrate the request with data that is useful for the `Drash.Http.Server`\nclass."
          ],
          "signature": "public hydrateHttpRequest(request: Drash.Http.Request, options?: any)",
          "name": "hydrateHttpRequest",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            },
            {
              "annotation": "@param any options",
              "data_type": "any",
              "description": [
                "A list of options."
              ],
              "name": "options"
            }
          ],
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the specified HTTP request's URL path."
          ],
          "signature": "public getHttpRequestUrlPath(request: Drash.Http.Request): string",
          "name": "getHttpRequestUrlPath",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [
                "Returns the URL path."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the specified HTTP request's URL query string."
          ],
          "signature": "public getHttpRequestUrlQueryString(request: Drash.Http.Request): string",
          "name": "getHttpRequestUrlQueryString",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [
                "Returns the URL query string (e.g., key1=value1&key2=value2) without\nthe leading \"?\" character."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the HTTP request's URL query params by parsing the URL query string."
          ],
          "signature": "public getHttpRequestUrlQueryParams(request: Drash.Http.Request): any",
          "name": "getHttpRequestUrlQueryParams",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns the URL query string in key-value pair format."
              ],
              "name": null
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get a MIME type for a file based on its extension."
          ],
          "signature": "public getMimeType(file: string, fileIsUrl: boolean = false): string",
          "name": "getMimeType",
          "params": [
            {
              "annotation": "@param string filename",
              "data_type": "string",
              "description": [
                "The filename in question."
              ],
              "name": "filename"
            },
            {
              "annotation": "@param boolean fileIsUrl",
              "data_type": "boolean",
              "description": [
                "Is the filename a URL/path to a file? Defaults to false."
              ],
              "name": "fileIsUrl"
            }
          ],
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [
                "Returns the name of the MIME type based on the extension of the\nfilename."
              ],
              "name": null
            }
          ],
          "throws": []
        }
      ]
    }
  }
}