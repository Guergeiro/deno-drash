{
  "Drash.Http": {
    "Response": {
      "properties": [
        {
          "access_modifier": "public",
          "annotation": "@property any body",
          "data_type": "any",
          "description": [
            "The body of this response."
          ],
          "example_code": [],
          "name": "body",
          "signature": "public body: any = {};"
        },
        {
          "access_modifier": "public",
          "annotation": "@property string body_generated",
          "data_type": "string",
          "description": [
            "The body of this response as a string."
          ],
          "example_code": [],
          "name": "body_generated",
          "signature": "public body_generated: string = \"\";"
        },
        {
          "access_modifier": "public",
          "annotation": "@property Headers headers",
          "data_type": "Headers",
          "description": [
            "This response's headers."
          ],
          "example_code": [],
          "name": "headers",
          "signature": "public headers: Headers;"
        },
        {
          "access_modifier": "public",
          "annotation": "@property Drash.Http.Request request",
          "data_type": "Drash.Http.Request",
          "description": [
            "The request object."
          ],
          "example_code": [],
          "name": "request",
          "signature": "public request: DrashHttpRequest;"
        },
        {
          "access_modifier": "public",
          "annotation": "@property number status_code",
          "data_type": "number",
          "description": [
            "This response's status code (e.g., 200 for OK). _Drash.Http.Response_ objects use _Status_ and _STATUS_TEXT_ from [https://deno.land/x/http/http_status.ts](https://deno.land/x/http/http_status.ts)."
          ],
          "example_code": [],
          "name": "status_code",
          "signature": "public status_code: number = Status.OK;"
        }
      ],
      "methods": [
        {
          "access_modifier": "*",
          "description": [
            "This response's status code (e.g., 200 for OK). _Drash.Http.Response_ objects use _Status_ and _STATUS_TEXT_ from [https://deno.land/x/http/http_status.ts](https://deno.land/x/http/http_status.ts)"
          ],
          "name": "objects",
          "params": [],
          "signature": "* objects use _Status_ and _STATUS_TEXT_ from [https://deno.land/x/http/http_status.ts](https://deno.land/x/http/http_status.ts)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "constructor(request:",
          "description": [
            "Construct an object of this class."
          ],
          "name": "DrashHttpRequest)",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "constructor(request: DrashHttpRequest)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Generate a response."
          ],
          "name": "generateResponse",
          "params": [],
          "signature": "public generateResponse()",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the status message based on the status code."
          ],
          "name": "getStatusMessage",
          "params": [],
          "signature": "public getStatusMessage()",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [
                "Returns the status message associated with `this.status_code`. For example, if the response's `status_code` is `200`, then this method will return \"OK\" as the status message."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the full status message based on the status code. This is just the status code and the status message together (e.g., `200 (OK)`, `401 (Unauthorized)`, etc.)."
          ],
          "name": "getStatusMessageFull",
          "params": [],
          "signature": "public getStatusMessageFull()",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Send the response to the client making the request."
          ],
          "name": "send",
          "params": [],
          "signature": "public send()",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns the output which is passed to `Drash.Http.Request.respond()`. The output is only returned for unit testing purposes. It is not intended to be used elsewhere as this call is the last call in the request-resource-response lifecycle."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Send the response of a \"static asset\" to the client making the request."
          ],
          "name": "sendStatic",
          "params": [],
          "signature": "public sendStatic()",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": []
            }
          ],
          "throws": []
        }
      ]
    },
    "Server": {
      "properties": [
        {
          "access_modifier": "protected",
          "annotation": "@property string[] static_paths",
          "data_type": "string[]",
          "description": [
            "This server's list of static paths. HTTP requests to a static path are usually intended to retrieve some type of concrete resource (e.g., a CSS file or a JS file). If an HTTP request is matched to a static path and the resource the HTTP request is trying to get is found, then `Drash.Http.Response` will use its `sendStatic()` method to send the static asset back to the client."
          ],
          "example_code": [],
          "name": "static_paths",
          "signature": "protected static_paths: string[] = [];"
        }
      ],
      "methods": [
        {
          "access_modifier": "*",
          "description": [
            "This server's list of static paths. HTTP requests to a static path are usually intended to retrieve some type of concrete resource (e.g., a CSS file or a JS file). If an HTTP request is matched to a static path and the resource the HTTP request is trying to get is found, then `Drash.Http.Response` will use its `sendStatic()"
          ],
          "name": "`Drash.Http.Response`",
          "params": [],
          "signature": "* `Drash.Http.Response` will use its `sendStatic()",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "constructor(configs:",
          "description": [
            "Construct an object of this class."
          ],
          "name": "DrashHttpServerConfigs)",
          "params": [
            {
              "annotation": "@param DrashHttpServerConfigs configs",
              "data_type": "DrashHttpServerConfigs",
              "description": [],
              "name": "configs"
            }
          ],
          "signature": "constructor(configs: DrashHttpServerConfigs)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle an HTTP request from the Deno server."
          ],
          "name": "handleHttpRequest",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "signature": "public handleHttpRequest(request: DrashHttpRequest)",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "See _Drash.Http.Response.send()_."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle cases when an error is thrown when handling an HTTP request."
          ],
          "name": "handleHttpRequestError",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            },
            {
              "annotation": "@param any error",
              "data_type": "any",
              "description": [
                "The error object."
              ],
              "name": "error"
            }
          ],
          "signature": "public handleHttpRequestError(request: DrashHttpRequest, error: any)",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "See _Drash.Http.Response.send()_."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle HTTP requests for the favicon. This method only exists to short-circuit favicon requests--preventing the requests from clogging the logs."
          ],
          "name": "handleHttpRequestForFavicon",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "public handleHttpRequestForFavicon(request: DrashHttpRequest)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Run the Deno server at the address specified in the configs. This method takes each HTTP request and creates a new and more workable request object and passes it to _Drash.Http.Server.handleHttpRequest()_."
          ],
          "name": "async",
          "params": [],
          "signature": "public async run()",
          "returns": [
            {
              "annotation": "@return Promise<void>",
              "data_type": "Promise<void>",
              "description": [
                "This method just listens for requests at the address you provide in the configs."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Add an HTTP resource to the server which can be retrieved at specific URIs.",
            "Drash defines an HTTP resource according to the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web)."
          ],
          "name": "addHttpResource",
          "params": [
            {
              "annotation": "@param Drash.Http.Resource resourceClass",
              "data_type": "Drash.Http.Resource",
              "description": [
                "A child object of the `Drash.Http.Resource` class."
              ],
              "name": "resourceClass"
            }
          ],
          "signature": "protected addHttpResource(resourceClass: DrashHttpResource)",
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [
                "This method just adds `resourceClass` to the resources property so it can be used (if matched) during an HTTP request."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Add a static path for serving static assets like CSS files and stuff."
          ],
          "name": "addStaticPath",
          "params": [
            {
              "annotation": "@param string path",
              "data_type": "string",
              "description": [],
              "name": "path"
            }
          ],
          "signature": "protected addStaticPath(path)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the resource class."
          ],
          "name": "getResourceClass",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "signature": "protected getResourceClass(request: DrashHttpRequest)",
          "returns": [
            {
              "annotation": "@return Drash.Http.Resource|undefined",
              "data_type": "Drash.Http.Resource|undefined",
              "description": [
                "- Returns a `Drash.Http.Resource` object if the URL path of the request can be matched to a `Drash.Http.Resource` object's paths. - Returns undefined if a `Drash.Http.Resource` object can't be matched."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Is the request for a static path asset?"
          ],
          "name": "requestIsForStaticPathAsset",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "protected requestIsForStaticPathAsset(request)",
          "returns": [
            {
              "annotation": "@return boolean",
              "data_type": "boolean",
              "description": [
                "Returns true if the request is for an asset in a static path."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "console.log() something. */ protected serverLog(message: any)"
          ],
          "name": "serverLog",
          "params": [],
          "signature": "protected serverLog(message: any)",
          "returns": [],
          "throws": []
        }
      ]
    }
  }
}