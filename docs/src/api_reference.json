{
  "Drash.Compilers": {
    "DocBlocksToJson": {
      "properties": [],
      "methods": [
        {
          "access_modifier": "public",
          "description": [
            "Compile a JSON string containing classes, properties, and methods in the Drash namespace."
          ],
          "example_code": [],
          "name": "compile",
          "params": [
            {
              "annotation": "@param string[] files",
              "data_type": "string[]",
              "description": [
                "The array of files containing doc blocks to parse."
              ],
              "name": "files"
            }
          ],
          "signature": "public compile(files: string[]): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns the JSON array."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Parse the specified array of method doc blocks and return an array of method-related data."
          ],
          "example_code": [],
          "name": "getClassMethods",
          "params": [
            {
              "annotation": "@param string[] docBlocks",
              "data_type": "string[]",
              "description": [],
              "name": "docBlocks"
            }
          ],
          "signature": "protected getClassMethods(docBlocks: string[]): any",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Parse the specified array of property doc blocks and return an array of property-related data."
          ],
          "example_code": [],
          "name": "getClassProperties",
          "params": [
            {
              "annotation": "@param string[] docBlocks",
              "data_type": "string[]",
              "description": [],
              "name": "docBlocks"
            }
          ],
          "signature": "protected getClassProperties(docBlocks: string[]): any",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the doc block's description."
          ],
          "example_code": [],
          "name": "getDocBlockDescription",
          "params": [],
          "signature": "protected getDocBlockDescription(docBlock: string)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the doc block's example code."
          ],
          "example_code": [],
          "name": "getDocBlockExampleCode",
          "params": [],
          "signature": "protected getDocBlockExampleCode(docBlock: string)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [],
          "example_code": [],
          "name": "getDocBlockParams",
          "params": [
            {
              "annotation": "@param` definitions from the doc block.",
              "data_type": "definitions",
              "description": [],
              "name": "from"
            },
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The docBlock to get the `@param` definitions from."
              ],
              "name": "docBlock"
            }
          ],
          "signature": "protected getDocBlockParams(docBlock: string): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [],
          "example_code": [],
          "name": "getDocBlockReturns",
          "params": [
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The docBlock to get the `@return` definitions from."
              ],
              "name": "docBlock"
            }
          ],
          "signature": "protected getDocBlockReturns(docBlock: string): any",
          "returns": [
            {
              "annotation": "@return` definitions from the doc block.",
              "data_type": "definitions",
              "description": []
            },
            {
              "annotation": "@return` definitions from.",
              "data_type": "definitions",
              "description": []
            },
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [],
          "example_code": [],
          "name": "getDocBlockThrows",
          "params": [
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The docBlock to get the `@throws` definitions from."
              ],
              "name": "docBlock"
            }
          ],
          "signature": "protected getDocBlockThrows(docBlock: string): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": []
            }
          ],
          "throws": [
            {
              "annotation": "@throws` definitions from the doc block.",
              "data_type": "definitions",
              "description": []
            },
            {
              "annotation": "@throws` definitions from.",
              "data_type": "definitions",
              "description": []
            }
          ]
        },
        {
          "access_modifier": "protected",
          "description": [],
          "example_code": [],
          "name": "getDocBlockAnnotation",
          "params": [
            {
              "annotation": "@param string annotation",
              "data_type": "string",
              "description": [
                "The annotation to get from the doc block."
              ],
              "name": "annotation"
            },
            {
              "annotation": "@param string docBlock",
              "data_type": "string",
              "description": [
                "The doc block to get the `@property` definitions from."
              ],
              "name": "docBlock"
            }
          ],
          "signature": "protected getDocBlockAnnotation(annotation: string, docBlock: string): string",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get paragraphs from a text block string."
          ],
          "example_code": [],
          "name": "getParagraphs",
          "params": [
            {
              "annotation": "@param string textBlock",
              "data_type": "string",
              "description": [
                "The text block containing the paragraph(s)."
              ],
              "name": "textBlock"
            }
          ],
          "signature": "protected getParagraphs(textBlock: string): string[]",
          "returns": [
            {
              "annotation": "@return string[]",
              "data_type": "string[]",
              "description": [
                "Returns an array of strings. Each element in the array is a paragraph."
              ]
            }
          ],
          "throws": []
        }
      ]
    }
  },
  "Drash.Exceptions": {
    "HttpException": {
      "properties": [],
      "methods": []
    }
  },
  "Drash.Http": {
    "Request": {
      "properties": [],
      "methods": [
        {
          "access_modifier": "constructor",
          "description": [
            "Construct an object of this class."
          ],
          "example_code": [],
          "name": "constructor",
          "params": [
            {
              "annotation": "@param ServerRequest request",
              "data_type": "ServerRequest",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "constructor(request: ServerRequest)",
          "returns": [],
          "throws": []
        }
      ]
    },
    "Resource": {
      "properties": [],
      "methods": [
        {
          "access_modifier": "constructor",
          "description": [
            "Construct an object of this class."
          ],
          "example_code": [],
          "name": "constructor",
          "params": [
            {
              "annotation": "@param ServerRequest request",
              "data_type": "ServerRequest",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "constructor(request: ServerRequest, response: DrashHttpResponse, server: DrashHttpServer)",
          "returns": [],
          "throws": []
        }
      ]
    },
    "Response": {
      "properties": [
        {
          "access_modifier": "public",
          "annotation": "@property any body",
          "data_type": "any",
          "description": [
            "The body of this response."
          ],
          "example_code": [
            {
              "filename": "app.ts",
              "filepath": "/api-reference/http/response/p_body.ts",
              "language": "typescript",
              "line_highlight": "6",
              "code": "import Drash from \" https://deno.land/x/drash/mod.ts\";\n\nclass HomeResource extends Drash.Http.Resource {\n  static paths = [\"/\"];\n  public GET() {\n    this.response.body = \"Ok... you got me.\";\n    return this.response;\n  }\n}\n\nlet server = new Drash.Http.Server({\n  address: \"localhost:8000\",\n  response_output: \"application/json\",\n  resources: [HomeResource],\n  logger: new Drash.Loggers.ConsoleLogger({\n    enabled: true,\n    level: \"debug\"\n  })\n});\n\nserver.run();\n"
            }
          ],
          "name": "body",
          "signature": "public body: any = {}"
        },
        {
          "access_modifier": "public",
          "annotation": "@property string body_generated",
          "data_type": "string",
          "description": [
            "The body of this response as a string."
          ],
          "example_code": [],
          "name": "body_generated",
          "signature": "public body_generated: string = \"\""
        },
        {
          "access_modifier": "public",
          "annotation": "@property Headers headers",
          "data_type": "Headers",
          "description": [
            "This response's headers."
          ],
          "example_code": [],
          "name": "headers",
          "signature": "public headers: Headers"
        },
        {
          "access_modifier": "public",
          "annotation": "@property Drash.Http.Request request",
          "data_type": "Drash.Http.Request",
          "description": [
            "The request object."
          ],
          "example_code": [],
          "name": "request",
          "signature": "public request: DrashHttpRequest"
        },
        {
          "access_modifier": "public",
          "annotation": "@property number status_code",
          "data_type": "number",
          "description": [
            "This response's status code (e.g., 200 for OK). _Drash.Http.Response_ objects use _Status_ and _STATUS_TEXT_ from [https://deno.land/x/http/http_status.ts](https://deno.land/x/http/http_status.ts)."
          ],
          "example_code": [],
          "name": "status_code",
          "signature": "public status_code: number = Status.OK"
        }
      ],
      "methods": [
        {
          "access_modifier": "constructor",
          "description": [
            "Construct an object of this class."
          ],
          "example_code": [],
          "name": "constructor",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "constructor(request: DrashHttpRequest)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Generate a response."
          ],
          "example_code": [],
          "name": "generateResponse",
          "params": [],
          "signature": "public generateResponse(): string",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the status message based on the status code."
          ],
          "example_code": [
            {
              "filename": "app.ts",
              "filepath": "/api-reference/http/response/m_getStatusMessage.ts",
              "language": "typescript",
              "line_highlight": "8",
              "code": "import Drash from \" https://deno.land/x/drash/mod.ts\";\nimport { Status } from \"https://deno.land/x/http/http_status.ts\";\n\nclass HomeResource extends Drash.Http.Resource {\n  static paths = [\"/\"];\n  public PUT() {\n    this.response.status_code = Status.NoContent;\n    console.log(this.response.getStatusMessage()); // Outputs => \"No Content\"\n    return this.response;\n  }\n}\n\nlet server = new Drash.Http.Server({\n  address: \"localhost:8000\",\n  response_output: \"application/json\",\n  resources: [HomeResource],\n  logger: new Drash.Loggers.ConsoleLogger({\n    enabled: true,\n    level: \"debug\"\n  })\n});\n\nserver.run();\n"
            }
          ],
          "name": "getStatusMessage",
          "params": [],
          "signature": "public getStatusMessage(): string",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": [
                "Returns the status message associated with `this.status_code`. For example, if the response's `status_code` is `200`, then this method will return \"OK\" as the status message."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Get the full status message based on the status code. This is just the status code and the status message together (e.g., `200 (OK)`, `401 (Unauthorized)`, etc.)."
          ],
          "example_code": [],
          "name": "getStatusMessageFull",
          "params": [],
          "signature": "public getStatusMessageFull(): string",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Send the response to the client making the request."
          ],
          "example_code": [],
          "name": "send",
          "params": [],
          "signature": "public send(): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "Returns the output which is passed to `Drash.Http.Request.respond()`. The output is only returned for unit testing purposes. It is not intended to be used elsewhere as this call is the last call in the request-resource-response lifecycle."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Send the response of a \"static asset\" to the client making the request."
          ],
          "example_code": [],
          "name": "sendStatic",
          "params": [],
          "signature": "public sendStatic(): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": []
            }
          ],
          "throws": []
        }
      ]
    },
    "Server": {
      "properties": [
        {
          "access_modifier": "protected",
          "annotation": "@property string[] static_paths",
          "data_type": "string[]",
          "description": [
            "This server's list of static paths. HTTP requests to a static path are usually intended to retrieve some type of concrete resource (e.g., a CSS file or a JS file). If an HTTP request is matched to a static path and the resource the HTTP request is trying to get is found, then `Drash.Http.Response` will use its `sendStatic()` method to send the static asset back to the client."
          ],
          "example_code": [],
          "name": "static_paths",
          "signature": "protected static_paths: string[] = []"
        }
      ],
      "methods": [
        {
          "access_modifier": "constructor",
          "description": [
            "Construct an object of this class."
          ],
          "example_code": [],
          "name": "constructor",
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "address: string",
                "logger: Drash.Http.ConsoleLogger|Drash.Http.FileLogger",
                "response_output: string (a proper MIME type)",
                "resources: Drash.Http.Resource[]",
                "static_paths: string[]"
              ],
              "name": "configs"
            }
          ],
          "signature": "constructor(configs: any)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle an HTTP request from the Deno server."
          ],
          "example_code": [],
          "name": "handleHttpRequest",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "signature": "public handleHttpRequest(request: DrashHttpRequest): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "See _Drash.Http.Response.send()_."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle cases when an error is thrown when handling an HTTP request."
          ],
          "example_code": [],
          "name": "handleHttpRequestError",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            },
            {
              "annotation": "@param any error",
              "data_type": "any",
              "description": [
                "The error object."
              ],
              "name": "error"
            }
          ],
          "signature": "public handleHttpRequestError(request: DrashHttpRequest, error: any): any",
          "returns": [
            {
              "annotation": "@return any",
              "data_type": "any",
              "description": [
                "See _Drash.Http.Response.send()_."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Handle HTTP requests for the favicon. This method only exists to short-circuit favicon requests--preventing the requests from clogging the logs."
          ],
          "example_code": [],
          "name": "handleHttpRequestForFavicon",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "public handleHttpRequestForFavicon(request: DrashHttpRequest): any",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Run the Deno server at the address specified in the configs. This method takes each HTTP request and creates a new and more workable request object and passes it to _Drash.Http.Server.handleHttpRequest()_."
          ],
          "example_code": [],
          "name": "async",
          "params": [],
          "signature": "public async run(): Promise<void>",
          "returns": [
            {
              "annotation": "@return Promise<void>",
              "data_type": "Promise<void>",
              "description": [
                "This method just listens for requests at the address you provide in the configs."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Add an HTTP resource to the server which can be retrieved at specific URIs.",
            "Drash defines an HTTP resource according to the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web)."
          ],
          "example_code": [],
          "name": "addHttpResource",
          "params": [
            {
              "annotation": "@param Drash.Http.Resource resourceClass",
              "data_type": "Drash.Http.Resource",
              "description": [
                "A child object of the `Drash.Http.Resource` class."
              ],
              "name": "resourceClass"
            }
          ],
          "signature": "protected addHttpResource(resourceClass: DrashHttpResource): void",
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [
                "This method just adds `resourceClass` to `this.resources` so it can be used (if matched) during an HTTP request."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Add a static path for serving static assets like CSS files, JS files, PDF files, etc."
          ],
          "example_code": [],
          "name": "addStaticPath",
          "params": [
            {
              "annotation": "@param string path",
              "data_type": "string",
              "description": [],
              "name": "path"
            }
          ],
          "signature": "protected addStaticPath(path: string): void",
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [
                "This method just adds `path` to `this.static_paths` so it can be used (if matched) during an HTTP request."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the resource class."
          ],
          "example_code": [],
          "name": "getResourceClass",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [
                "The request object."
              ],
              "name": "request"
            }
          ],
          "signature": "protected getResourceClass(request: DrashHttpRequest): DrashHttpResource|undefined",
          "returns": [
            {
              "annotation": "@return Drash.Http.Resource|undefined",
              "data_type": "Drash.Http.Resource|undefined",
              "description": [
                "Returns a `Drash.Http.Resource` object if the URL path of the request can be matched to a `Drash.Http.Resource` object's paths.",
                "Returns `undefined` if a `Drash.Http.Resource` object can't be matched."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Is the request for a static path asset?"
          ],
          "example_code": [],
          "name": "requestIsForStaticPathAsset",
          "params": [
            {
              "annotation": "@param Drash.Http.Request request",
              "data_type": "Drash.Http.Request",
              "description": [],
              "name": "request"
            }
          ],
          "signature": "protected requestIsForStaticPathAsset(request: DrashHttpRequest): boolean",
          "returns": [
            {
              "annotation": "@return boolean",
              "data_type": "boolean",
              "description": [
                "Returns true if the request is for an asset in a static path."
              ]
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "console.log() something."
          ],
          "example_code": [],
          "name": "serverLog",
          "params": [
            {
              "annotation": "@param any message",
              "data_type": "any",
              "description": [
                "The message to output in the console. String messages are prefixed with [Drash]; and all other data types are logged on a new line."
              ],
              "name": "message"
            }
          ],
          "signature": "protected serverLog(message: any): void",
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": [
                "This method just logs a message to the console."
              ]
            }
          ],
          "throws": []
        }
      ]
    }
  },
  "Drash.Loggers": {
    "Logger": {
      "properties": [],
      "methods": [
        {
          "access_modifier": "constructor",
          "description": [
            "Construct an object of this class."
          ],
          "example_code": [],
          "name": "constructor",
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "See [Drash.Loggers.Logger.configs](/#/api-reference/loggers/logger#configs)."
              ],
              "name": "configs"
            }
          ],
          "signature": "constructor(configs: any)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a DEBUG level log message."
          ],
          "example_code": [],
          "name": "debug",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "public debug(message)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output an ERROR level log message."
          ],
          "example_code": [],
          "name": "error",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "public error(message)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a FATAL level log message."
          ],
          "example_code": [],
          "name": "fatal",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "public fatal(message)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output an INFO level log message."
          ],
          "example_code": [],
          "name": "info",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "public info(message)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a TRACE level log message."
          ],
          "example_code": [],
          "name": "trace",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "public trace(message)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "Output a WARN level log message."
          ],
          "example_code": [],
          "name": "warn",
          "params": [
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "public warn(message)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Get the parsed version of the raw tag string."
          ],
          "example_code": [],
          "name": "getTagStringParsed",
          "params": [],
          "signature": "protected getTagStringParsed(): string",
          "returns": [
            {
              "annotation": "@return string",
              "data_type": "string",
              "description": []
            }
          ],
          "throws": []
        },
        {
          "access_modifier": "protected",
          "description": [
            "Send the message to the write method (which should be in the child class). Also, do some prechecks before sending."
          ],
          "example_code": [],
          "name": "sendToWriteMethod",
          "params": [
            {
              "annotation": "@param any logMethodLevelDefinition",
              "data_type": "any",
              "description": [
                "The dictionary definition of the log message's level."
              ],
              "name": "logMethodLevelDefinition"
            },
            {
              "annotation": "@param string message",
              "data_type": "string",
              "description": [
                "The log message."
              ],
              "name": "message"
            }
          ],
          "signature": "protected sendToWriteMethod(logMethodLevelDefinition, message)",
          "returns": [
            {
              "annotation": "@return void",
              "data_type": "void",
              "description": []
            }
          ],
          "throws": []
        }
      ]
    },
    "ConsoleLogger": {
      "properties": [],
      "methods": [
        {
          "access_modifier": "constructor",
          "description": [
            "Construct an object of this class."
          ],
          "example_code": [],
          "name": "constructor",
          "params": [
            {
              "annotation": "@param any configs",
              "data_type": "any",
              "description": [
                "*/"
              ],
              "name": "configs"
            }
          ],
          "signature": "constructor(configs)",
          "returns": [],
          "throws": []
        },
        {
          "access_modifier": "public",
          "description": [
            "@inheritdoc"
          ],
          "example_code": [],
          "name": "write",
          "params": [],
          "signature": "public write(logMethodLevelDefinition, message): string",
          "returns": [],
          "throws": []
        }
      ]
    },
    "FileLogger": {
      "properties": [],
      "methods": []
    }
  }
}